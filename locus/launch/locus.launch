<launch>
 
    <arg name="robot_namespace" default="robot"/>

    <arg name="use_gdb" default="true"/>
    <arg name="nodelet_manager" value="nodelet_manager"/>
    <arg name="launch_prefix" value="gdb -ex run --args" if="$(arg use_gdb)"/>
    <arg name="launch_prefix" value="" unless="$(arg use_gdb)"/>
    <arg name="nodelet_args" value="--no-bond"/>
    <arg name="respawn" value="false" if="$(arg use_gdb)"/>
    <arg name="respawn" value="true" unless="$(arg use_gdb)"/>
    <arg name="robot_type" default="husky" if="$(eval robot_namespace.startswith('husky'))"/>
    <arg name="robot_type" default="spot"  if="$(eval robot_namespace.startswith('spot'))"/> 

    <arg name="pc_topic" default="velodyne_points"/>
    <arg name="number_of_velodynes" default="3" />
    <arg name="b_use_multiple_pc" value="$(eval arg('number_of_velodynes') > 1)"/>
    <arg name="pc_input" value="locus_input"/>

    <!-- 0:TOP, 1:FRONT, 2:REAR -->
    <arg name="pc_trans_in_0" default="$(arg pc_topic)/transformed"/>
    <arg name="pc_trans_in_1" default="velodyne_front/$(arg pc_topic)/transformed"/>
    <arg name="pc_trans_in_2" default="velodyne_rear/$(arg pc_topic)/transformed"/>

    <group ns="$(arg robot_namespace)">

        <!-- Load parameters -->
        <rosparam file="$(find locus)/config/body_filter_params_$(arg robot_type).yaml"
                    subst_value="true"/>

        <!-- Load robot description -->
        <!-- <include file="$(find locus)/launch/robot_description.launch">
            <arg name="robot_namespace" value="$(arg robot_namespace)"/>
        </include> -->
   
        <node
            pkg="locus"
            name="locus"
            type="locus_node"
            output="screen">

           
            <remap from="~LIDAR_TOPIC" to="$(arg pc_input)"/>

            <remap from="~ODOMETRY_TOPIC" to="jackal_velocity_controller/odom"/>
            <remap from="~ODOMETRY_TOPIC" to="visual_odom" if="$(eval robot_namespace.startswith('spot'))"/>
            <remap from="~ODOMETRY_TOPIC" to="hero/wio_ekf/odom" if="$(eval robot_namespace.startswith('husky'))"/>

            <remap from="~IMU_TOPIC" to="vn100/imu_wori_wcov"/>            
            <remap from="~POSE_TOPIC" to="not_currently_used"/>

            <remap from="~SPACE_MONITOR_TOPIC" to="localizer_space_monitor/xy_cross_section"/>

            <!-- For Sim -->
            <!-- <remap from="~ODOMETRY_TOPIC" to="wheel_odom"/> -->         

            <remap from="/diagnostics" to="hero/diagnostics"/>

            <param name="robot_name" value="$(arg robot_namespace)"/>
            <param name="tf_prefix" value="$(arg robot_namespace)"/>

            <param name="b_integrate_interpolated_odom" value="true" if="$(eval robot_namespace.startswith('spot'))"/>
            <param name="b_integrate_interpolated_odom" value="false" unless="$(eval robot_namespace.startswith('spot'))"/>

            <rosparam file="$(find locus)/config/lo_settings.yaml" />

            <param name="b_pub_odom_on_timer" value="false" />

            <rosparam file="$(find locus)/config/lo_frames.yaml" subst_value="true"/>
            <rosparam file="$(find point_cloud_filter)/config/parameters.yaml"/>
            <rosparam file="$(find point_cloud_odometry)/config/parameters.yaml"/>          
            <rosparam file="$(find point_cloud_localization)/config/parameters.yaml" unless="$(eval robot_type == 'spot')"/>
            <rosparam file="$(find point_cloud_localization)/config/spot_parameters.yaml" if="$(eval robot_type == 'spot')"/>
            <rosparam file="$(find point_cloud_mapper)/config/parameters.yaml"/>

            <param name="localization/num_threads"       value="4" if="$(eval robot_namespace.startswith('husky'))" />
            <param name="icp/num_threads"                value="4" if="$(eval robot_namespace.startswith('husky'))" />
            <param name="mapper/num_threads"             value="4" if="$(eval robot_namespace.startswith('husky'))" />

            <param name="localization/num_threads"       value="1" unless="$(eval robot_namespace.startswith('husky'))" />
            <param name="icp/num_threads"                value="1" unless="$(eval robot_namespace.startswith('husky'))" />
            <param name="mapper/num_threads"             value="1" unless="$(eval robot_namespace.startswith('husky'))" />

        </node>

        <node pkg="locus" name="sensors_health_monitor" type="sensors_health_monitor.py" output="screen" if="$(eval number_of_velodynes > 1)"> 
            <remap from="failure_detection" to="point_cloud_merger_lo/failure_detection"/>
            <remap from="resurrection_detection" to="point_cloud_merger_lo/resurrection_detection"/>
        </node>

        <node pkg="nodelet"
            type="nodelet"
            name="transform_points_base_link"
            args="standalone pcl/PassThrough">
            <remap from="~input" to="$(arg pc_topic)"/>
            <remap from="~output" to="$(arg pc_trans_in_0)"/>
            <rosparam subst_value="true">
                filter_field_name: z
                filter_limit_min: -100
                filter_limit_max: 100
                output_frame: $(arg robot_namespace)/base_link
            </rosparam>
        </node>

        <node if="$(eval arg('number_of_velodynes') > 1)"
            pkg="nodelet"
            type="nodelet"
            name="transform_points_base_link_front"
            args="standalone pcl/PassThrough">
            <remap from="~input" to="velodyne_front/velodyne_points"/>
            <remap from="~output" to="$(arg pc_trans_in_1)"/>
            <rosparam subst_value="true">
                filter_field_name: z
                filter_limit_min: -100
                filter_limit_max: 100
                output_frame: $(arg robot_namespace)/base_link
            </rosparam>
        </node>

        <node if="$(eval arg('number_of_velodynes') > 2)"
            pkg="nodelet"
            type="nodelet"
            name="transform_points_base_link_rear"
            args="standalone pcl/PassThrough">
            <remap from="~input" to="velodyne_rear/velodyne_points"/>
            <remap from="~output" to="$(arg pc_trans_in_2)"/>
            <rosparam subst_value="true">
                filter_field_name: z
                filter_limit_min: -100
                filter_limit_max: 100
                output_frame: $(arg robot_namespace)/base_link
            </rosparam>
        </node>

        <node if="$(arg b_use_multiple_pc)" pkg="point_cloud_merger" type="point_cloud_merger_node" name="point_cloud_merger_lo" output="screen">
            <rosparam file="$(find point_cloud_merger)/config/parameters.yaml"/>
            <param name="merging/number_of_velodynes" value="$(arg number_of_velodynes)"/>
            <remap from="~pcld0" to="$(arg pc_trans_in_0)"/>
            <remap from="~pcld1" to="$(arg pc_trans_in_1)"/>
            <remap from="~pcld2" to="$(arg pc_trans_in_2)"/>
            <remap from="~combined_point_cloud" to="combined_point_cloud"/>
        </node>    

        <node pkg="nodelet"
              type="nodelet"
              name="$(arg nodelet_manager)"
              launch-prefix="$(arg launch_prefix)"
              args="manager"
              respawn="$(arg respawn)"/>
        
        <node pkg="nodelet"
              type="nodelet"
              name="body_filter"
              args="load point_cloud_filter/BodyFilter $(arg nodelet_manager) $(arg nodelet_args)"
              respawn="$(arg respawn)">
          <remap from="~input" to="combined_point_cloud" if="$(arg b_use_multiple_pc)"/>
          <remap from="~input" to="$(arg pc_topic)/transformed" unless="$(arg b_use_multiple_pc)"/>
        </node>

<!-- old way. TODO: removing after locus testing-->
<!--node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid $(arg nodelet_manager)" output="screen" respawn="true"-->

        <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load point_cloud_filter/CustomVoxelGrid $(arg nodelet_manager)" output="screen" respawn="true">
            <remap from="~input" to="body_filter/output" />

            <rosparam subst_value="true">
            filter_field_name: y
            filter_limit_min: -10
            filter_limit_max: 10
            filter_limit_negative: False
            leaf_size: 0.2
            output_frame: $(arg robot_namespace)/base_link
            </rosparam>
        </node>

        <node pkg="nodelet"
            type="nodelet"
            name="normal_computation"
            args="load point_cloud_filter/NormalComputation $(arg nodelet_manager) $(arg nodelet_args)"
            respawn="$(arg respawn)">
            <remap from="~input" to="voxel_grid/output"/>
            <remap from="~output" to="$(arg pc_input)" />

           <param name="num_threads"                value="4" if="$(eval robot_namespace.startswith('husky'))" />
           <param name="num_threads"                value="1" unless="$(eval robot_namespace.startswith('husky'))" />

        </node>

        <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_velolink" args="0 0 0 0 0 0 $(arg robot_namespace)/base_link $(arg robot_namespace)/velodyne_link" />
        <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_velo" args="0 0 0 0 0 0 $(arg robot_namespace)/base_link $(arg robot_namespace)/velodyne" />
      
    </group>
 
</launch>
